#!/bin/ksh
#
# GENERAL: the basic concept of this script is to provide a function to export
# the particular GPIO pin.
#
# THINGS TO NOTE: this will eventually work on (hopefully) all ARM architecture
# systems. That includes Beagle Bone Black, probably an Arduino YUN [but I don't
# have one], and the Raspberry Pi, along with others.
#
# Because of this, things get interesting ... I've looked into beagle bone Black
# device tree overlays so that you can change a pin mux to general GPIO or
# whatever (SPI/i2c/HDMI/...). The Raspberry Pi is less forthcoming [or I haven't
# researched it enough] - that is to say, I don't know how to pin mux on RasPi.
#
# Anyway, all this is to say that right now, this only works for a RasPi 2.
# and is pretty debian based (kernel 3.18.7-v7+ Rasbian)

function exportgp {
#	set -o xtrace
	typeset VERSION USAGE PULLUP PULLDOWN PIN_NUM 
    VERSION=0.1

    USAGE=$'[-?\n@(#)$Id: '$0' '${VERSION}'(SYSFS GPIO KSH Library)]'
    USAGE+="[-author?Joshua Taylor <joshua dot taylor at sub dash verses dot org>.]"
    USAGE+="[-copyright?2015 Joshua Taylor and anyone that adds to it.]"
    USAGE+="[-license?https://www.gnu.org/licenses/gpl-3.0.txt]"
    USAGE+="[+NAME?exportg --- makes a gpio pin available for access]"
    USAGE+="[+DESCRIPTION?$0 exports a gpio pin so that it can be read or written via SYSFS]"
    USAGE+="[g:gpio]#[gpio?the broadcom GPIO pin number]"
    USAGE+="[d:direction?Direction]:{
        [DIRECTION=in?sets GPIO to input for read.]
        [DIRECTION=out?set GPIO to output for write (default)]
    }"
    USAGE+="[p:pull?set pull-up or pull-down. NOTE not all pins have pull-ups/downs.]{
        [up?sets the internal pull-up resister]
        [down?sets the internal pull-down resister]
    }"

	#DEFAULTS

    #DIRECTION=out
	PULLUP=0 PULLDOWN=0
	PIN_NUM=

    while getopts "${USAGE}" O
    do
        case ${O} in
            g)
                PIN_NUM=${OPTARG}
                ;;
            d)
                DIRECTION=${OPTARG}
                case ${DIRECTION} in
                    "in")
                        typeset set_direction="set_read"
                        ;;
                    "out")
                        typeset set_direction="set_write"
                        ;;
                esac
                ;;
            p)
                if [[ ${OPTARG} =~ (U|u) ]]
                then
                    PULLUP=1
                    PULLDOWN=0
                elif [[ ${OPTARG} =~ (D|d) ]]; then
                    PULLUP=0
                    PULLDOWN=1
                fi
                ;;
            *)
                print -u2 "$0: -g [pin number] -d [direction] [-p u|d]"
                return 1
                ;;
            :)
                print -u2 "$0: ${OPTARG} requires an argument."
                return 1
                ;;

            esac
    done

    typeset sysfs="/sys/class/gpio" gpio="${sysfs}/gpio${PIN_NUM}" exported

    # check for already exported ... 0 is true
    [[ -L ${gpio} ]] && exported=0 || exported=1 # 0=TRUE (isExported)

    if [[ ${exported} == 1 && -n ${DIRECTION} ]]; then
        echo "${PIN_NUM}" > ${sysfs}/export
		until [[ -w ${gpio}/direction ]]; do
			sleep 0.1
		done
		echo "${DIRECTION}" > ${gpio}/direction
        #${set_direction} ${PIN_NUM}
    elif [[ ${exported} == 0  && ${DIRECTION} != $(cat ${gpio}/direction) ]]; then
        echo "${DIRECTION}" > ${gpio}/direction
        #${set_direction} ${PIN_NUM}
    elif [[ ${exported} == 1 && -z ${DIRECTION} ]]; then
        echo "${PIN_NUM}" > ${sysfs}/export
		until [[ -w ${gpio}/direction ]]; do
			sleep 0.1
		done
        echo "out" > ${gpio}/direction
        #${set_direction} ${PIN_NUM}
    fi
}
