garden app notes:

based on node.js, express.js, later.js, octalbonescript(?), mqtt, ws.js, and others.


equiqpment management
	add/del/mod devices & containers.
	provide data &/|| actions.
equipment automation
	add/del/mod schedules
	associate schedules defined in the schedule collection with equipment/containers & actions
		(e.g. {sensor: dht_ID, action: getTemp(...), laterSched: "every 10 mins"} )
later schedules
	add/del/mod named schedules
	provide data for later.js

needs a kind of logical space/geo management that keys to the devices.
schedules should be associated with the logical space. (i've been calling them zones, but habitat could also work)

a series of monitors can be defined to subscribe to the device messages, with
thresholds set, etc. -- these should be defined by the logical zone/space.

It would be interesting if the monitor could emit events - alarms of variety
classes (info, warning, critical, error, etc), and listeners could be set
to perform actions.

./devices.json should contain the device definitions.

var Devices = require('Devices');
var x = Devices();

The management of the schedules, montiors, actions, devices still has to be
worked out. How to define later.js schedules via a web model, how to
create monitors(property to check, threshholds, actions, frequency),
actions(start, stop, dimUp, dimDown, open, close, )... etc.

################################################################################
to RECAP:
sensors defined, schedules defined, actions defined, conditions defined.
first sensors/actuators: DHT22, Power Relays*8, analogCT
